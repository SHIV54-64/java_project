import java.util.*;
import java.io.*;

// Room class
class Room implements Serializable {
    int number;
    String type;
    boolean booked;

    Room(int number, String type) {
        this.number = number;
        this.type = type;
        this.booked = false;
    }
}

// Main class
public class HotelReservation {
    static ArrayList<Room> rooms = new ArrayList<>();
    static final String FILE = "rooms.dat";
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        loadRooms(); // Load rooms or initialize defaults

        while (true) {
            System.out.println("\n1. Show Rooms  2. Book Room  3. Cancel Booking  4. Exit");
            System.out.print("Choose option: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1 -> showRooms();
                case 2 -> bookRoom();
                case 3 -> cancelBooking();
                case 4 -> { saveRooms(); System.exit(0); }
                default -> System.out.println("Invalid option!");
            }
        }
    }

    // Show all rooms
    static void showRooms() {
        System.out.println("\nRoomNo\tType\tStatus");
        for (Room r : rooms)
            System.out.println(r.number + "\t" + r.type + "\t" + (r.booked ? "Booked" : "Available"));
    }

    // Book a room
    static void bookRoom() {
        System.out.print("Enter Room Number to book: ");
        int num = sc.nextInt();
        for (Room r : rooms) {
            if (r.number == num) {
                if (!r.booked) { r.booked = true; System.out.println("Room " + num + " booked!"); }
                else System.out.println("Room already booked!");
                return;
            }
        }
        System.out.println("Room not found!");
    }

    // Cancel a booking
    static void cancelBooking() {
        System.out.print("Enter Room Number to cancel: ");
        int num = sc.nextInt();
        for (Room r : rooms) {
            if (r.number == num) {
                if (r.booked) { r.booked = false; System.out.println("Booking canceled for Room " + num); }
                else System.out.println("Room is already available!");
                return;
            }
        }
        System.out.println("Room not found!");
    }

    // Save rooms to file
    static void saveRooms() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE))) {
            oos.writeObject(rooms);
        } catch (Exception e) {
            System.out.println("Error saving data!");
        }
    }

    // Load rooms from file safely
    static void loadRooms() {
        File f = new File(FILE);
        if (f.exists()) {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE))) {
                @SuppressWarnings("unchecked")
                ArrayList<Room> loadedRooms = (ArrayList<Room>) ois.readObject();
                rooms = loadedRooms;
            } catch (Exception e) {
                System.out.println("Error loading data! Initializing default rooms.");
                initializeRooms();
            }
        } else {
            initializeRooms();
        }
    }

    // Initialize default rooms
    static void initializeRooms() {
        rooms = new ArrayList<>();
        rooms.add(new Room(101, "Standard"));
        rooms.add(new Room(102, "Deluxe"));
        rooms.add(new Room(103, "Suite"));
        rooms.add(new Room(104, "Standard"));
    }
}
